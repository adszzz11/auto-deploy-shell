# base.env - Auto Deploy Shell Configuration
#
# 이 파일은 사용자가 관리하는 유일한 환경 설정 파일입니다.
# 각 모듈의 .env 파일은 기본값만 제공하며, 이 파일이 모든 설정을 오버라이드합니다.
#
# 사용법: ./main.sh deploy <count> base.env

# ============================================================
# 필수 설정 (Required)
# ============================================================

# 서비스 이름
export SERVICE_NAME="service_name"

# 물리 서버 타입 (A 또는 B)
# - TYPE=A: machine_id 0-4 사용 (인스턴스 0-4)
# - TYPE=B: machine_id 5-9 사용 (인스턴스 0-4)
export TYPE="A"

# 기본 포트 (인스턴스 번호가 뒤에 붙음: 808 + 0 = 8080)
export BASE_PORT="808"

# 서비스 기본 디렉터리
export SERVICE_BASE_DIR="/home/service"

# Nginx upstream 설정 파일 경로
export UPSTREAM_CONF="/etc/nginx/conf.d/upstream.conf"

# ============================================================
# 선택 설정 (Optional)
# ============================================================

# 로그 디렉터리
export LOG_BASE_DIR="/home/system/logs"

# Java 실행 파일 경로 (기본값: java)
# 여러 Java 버전 사용 예시:
#   - Java 8:  export APP_JAVA_EXECUTABLE="/usr/lib/jvm/java-8-openjdk/bin/java"
#   - Java 11: export APP_JAVA_EXECUTABLE="/usr/lib/jvm/java-11-openjdk/bin/java"
#   - Java 17: export APP_JAVA_EXECUTABLE="/usr/lib/jvm/java-17-openjdk/bin/java"
#   - Java 21: export APP_JAVA_EXECUTABLE="/usr/lib/jvm/java-21-openjdk/bin/java"
#   - 기본값:  export APP_JAVA_EXECUTABLE="java"
export APP_JAVA_EXECUTABLE="java"

# Spring Boot 실행 옵션
# MACHINE_ID 변수 사용 가능 (TYPE에 따라 자동 계산: A=0-4, B=5-9)
# 예: TYPE=A, instance=0 → MACHINE_ID=0
# 예: TYPE=B, instance=0 → MACHINE_ID=5
export JAVA_OPTS="--spring.profiles.active=prod --profile.machine_id=\${MACHINE_ID}"

# 애플리케이션 실행 모드 (restart, start, stop)
export APP_MODE="restart"

# 애플리케이션 콘솔 로그 출력 여부 (true: 로그 파일에 출력, false: /dev/null로 버림)
export APP_CONSOLE_LOG_ENABLED="false"

# ============================================================
# Multi Deploy 설정
# ============================================================

# 배포 전략 (인스턴스 범위: 2-5개 고정, 확장 불가)
export MULTI_DEPLOY_WAIT_BETWEEN_DEPLOYS=2
export MULTI_DEPLOY_STABILIZATION_WAIT=5

# ============================================================
# 테스트 설정
# ============================================================

# 테스트 스크립트 (선택사항)
# 스크립트는 포트를 인자로 받고, exit code로 성공(0)/실패(1)를 반환해야 함
# 예: ./test_instance.sh 8080
export TEST_SCRIPT="./test_instance.sh"

# ============================================================
# 참고사항
# ============================================================
#
# 포트 체계:
#   BASE_PORT=808, Instance 0 → Port 8080
#   BASE_PORT=808, Instance 1 → Port 8081
#   ...
#
# Machine ID 체계 (물리 서버 구분):
#   TYPE=A:
#     Instance 0 → machine_id=0
#     Instance 1 → machine_id=1
#     Instance 2 → machine_id=2
#     Instance 3 → machine_id=3
#     Instance 4 → machine_id=4
#
#   TYPE=B:
#     Instance 0 → machine_id=5
#     Instance 1 → machine_id=6
#     Instance 2 → machine_id=7
#     Instance 3 → machine_id=8
#     Instance 4 → machine_id=9
#
# 디렉터리 구조:
#   ${SERVICE_BASE_DIR}/${SERVICE_NAME}/
#   ├── jar_trunk/           # JAR 파일들 (자동 생성됨)
#   └── instances/
#       ├── 0/
#       │   ├── current.jar      (symlink)
#       │   ├── current.jar.bak  (backup)
#       │   └── logs/            (symlink)
#       ├── 1/
#       └── 2/
#
# 필수 환경 변수:
#   SERVICE_NAME, BASE_PORT, SERVICE_BASE_DIR, UPSTREAM_CONF
#
# 자동 생성 변수:
#   JAR_TRUNK_DIR="${SERVICE_BASE_DIR}/${SERVICE_NAME}/jar_trunk"
#
# 사용 예시:
#   1. 이 파일 복사: cp base.env myapp.env
#   2. 설정 수정: vi myapp.env
#   3. 배포 실행: ./main.sh deploy 3 myapp.env
#
